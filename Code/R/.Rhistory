x30 <- data.frame(x=x[1:30], Sample=as.factor(30))
x50 <- data.frame(x=x[1:50], Sample=as.factor(50))
x100 <- data.frame(x=x[1:100], Sample=as.factor(100))
x1000 <- data.frame(x=x[1:1000], Sample=as.factor(1000))
x5000 <- data.frame(x=x, Sample=as.factor(5000))
x.melt <- melt(rbind(x30, x50, x100, x1000, x5000),
measure.vars=1)
ggplot(x.melt, aes(x=value, col=Sample, group=Sample)) +
stat_ecdf(geom="step", size=1.2, alpha=.7) +
xlab("Observations") +
ylab("Cumulative distribution functions")
ggplot(x.melt, aes(x=value, col=Sample, group=Sample)) +
stat_ecdf(geom="step", size=1.2, alpha=.7) +
xlim(3, 3.5) +
xlab("Observations") +
ylab("Cumulative distribution functions")
ggplot(x.melt, aes(x=value, col=Sample, group=Sample)) +
stat_ecdf(geom="step", size=1.2, alpha=.7) +
xlim(3, 3.5) +
xlab("Observations") +
ylab("Cumulative distribution functions")
knitr::opts_chunk$set(echo = TRUE)
require(reshape2)
theme_set(theme_minimal())
require(ggExtra)
# Exploratory Data Analysis
We will use the "imagematrix" library.
It is basic, but enough for our purposes.
We will also load three data sets that are available in the repository.
```{r LoadUrbanHVData}
load("D:/Program Files/R/RStudio/documents/Data/R/UrbanHV.Rdata")
load("D:/Program Files/R/RStudio/documents/Data/R/UrbanHV.Rdata")
We will work with the Urban data set.
# Inspect what they are in the Environment window
An Exploratory Data Analysis - EDA can be quantitative, graphical, or both.
We usually start reporting the very basic information about the data.
typeof(UrbanHV)
typeof(UrbanHV)
dim(UrbanHV)
summary(vector.UrbanHV)
Let's move to graphical representations of the data.
```{r Graphical_EDA_Urban_Boxplot, fig.cap='Boxplots with notches', fig.subcap=c('Linear scale', 'Semilogarithmic scale'), out.width = "50%", fig.align = "center"}
Histograms of the data complement the information shown by the boxplots.
We will use the Freedman-Diaconis rule for building the histograms.
It consists of using bins of equal size: $\frac32 \text{IQR}(z) / n^{1/3}$.
```{r Graphical_EDA_Urban_Histogram, fig.cap='Histograms', fig.subcap=c('Linear scale', 'Semilogarithmic scale'), out.width = "50%", fig.align = "center"}
ggplot(vector.UrbanHV, aes(x=UrbanHV)) +
geom_histogram(aes(y=..density..),
bins=nclass.FD(unlist(vector.UrbanHV)),
col="black", fill="white") +
scale_x_log10()
How about "mixing" the second boxplot with the second histogram?
What can we conclude from this analysis?
* The data are positive
* The data have a very large dynamic range
* The data are strongly asymmetric
It's time to look ad the data in their "natural" domain: as an image.
The "imagematrix" library requires that the data be in $[0,1]$.
It provides a function to accomplish this mapping.
```{r}
We hardly see anything.
There are a few very large values that "flatten" most of the observations into very dark shades of gray.
We would like to "use" equally all possible values.
In other words, we would like to have a uniform histogram.
We need some theory to solve this challenge.
Consider the continuous random variable $Z\colon \Omega\to\mathbb R$ with cumulative distribution function $F_Z$.
The random variable $W=F_Z(Z)$ has uniform distribution.
Proof: The cumulative distribution function of $W$ is $F_W(w)=\Pr(W\leq w)=\Pr(F_Z(Z)\leq w)$.
Since $Z$ is continuous, there exists the inverse of its cumulative distribution function, $F^{-1}_Z$.
We can then write
$F_W(w)=\Pr(F_Z(Z)\leq w) = \Pr(F^{-1}_Z(F_Z(Z)) \leq F_Z^{-1}(w)) = \Pr(Z\leq F^{-1}_Z(w))$,
which is exactly the cumulative distribution function of $Z$ at $F^{-1}_Z(w)$, so $F_W(w)=F_Z(F^{-1}_Z(w))=w$, which characterizes a uniform random variable on $(0,1)$.
So we only need to apply the cumulative distribution function of the random variable that produced the data to the data themselves and we will obtain samples from the Uniform distribution.
But do we have this function?
Usually we don't, but we can estimate it.
One of the simplest manners to estimate a cumulative distribution function from data $z=(z_1,\dots,z_n)$ is with the empirical cumulative distribution function, or just "empirical function."
It is just the finite approximation of the definition of a cumulative distribution function, and is given by
\begin{equation}
\widehat{F}(t) = \frac1n \#\{j \text{ such that } z_j\leq t\} ,
\end{equation}
where $\#$ denotes the number of elements in the set.
Let us see the original data and its empirical function.
```{r OriginalDataEmpiricalFunction}
ggplot(vector.UrbanHV, aes(x=UrbanHV)) +
geom_histogram(aes(y=..density..),
bins=nclass.FD(unlist(vector.UrbanHV))/50,
col="black", fill="white") +
stat_ecdf(col="red") +
Let us implement this idea.
ylab("Density and Empirical function") +
# Finally, we restore the matrix organization of the data
dim(eq.UrbanHV) <- dim(UrbanHV)
Let us now perform an EDA on the equalized data.
```{r EDA_EqualizedData}
Histogram equalization is one of the most important (and basic) operations in image processing.
Once we have understood how it works, we may use the function already implemented in the imagematrix library.
But\dots\ do we need something "so complicated"?
Cannot we use a simple transformation as, for instance, the logarithm?
Of course we can!
```{r LogarithmImageTransformation}
plot(imagematrix(normalize(log(UrbanHV))))
Not so good, but a nice try.
## The effect of the bin size on the histogram
The bin size may have big impact on the histogram and, thus, affect the reader's understanding of the data.
We will see examples of this effect with a sample of size $n=300$.
```{r BinSizeEffect, fig.cap='Histograms', fig.subcap=c('Default bin size', 'Freedmand-Diaconis bin size', "Improved histogram"), out.width = "50%", fig.align = "center"}
## The effect of the sample size on the empirical function
The sample size has major impact on all EDA techniques.
In particular, we will see how it affects the empirical function.
```{r SampleSizeEffectonECDF, fig.cap='Empirical functions', fig.subcap=c('Complete data set', 'Selected area'), out.width = "50%", fig.align = "center", warning=FALSE}
x50 <- data.frame(x=x[1:50], Sample=as.factor(50))
x1000 <- data.frame(x=x[1:1000], Sample=as.factor(1000))
x.melt <- melt(rbind(x30, x50, x100, x1000, x5000),
measure.vars=1)
ggplot(x.melt, aes(x=value, col=Sample, group=Sample)) +
stat_ecdf(geom="step", size=1.2, alpha=.7) +
xlim(3, 3.5) +
xlab("Observations") +
ylab("Cumulative distribution functions")
## Multivariate data
We will use a trivariate data set now.
typeof(dark)
dim(dark)
It is an image with three bands.
Let's look at it as it is, and after equalization (independent by band).
plot(imagematrix(normalize(dark)))
plot(imagematrix(normalize(dark)))
plot(imagematrix(equalize_indep(dark)))
Now we transform the image data into a data.frame.
```{r ImageIntodataframe}
Pairs plot: gives an idea of the relationships between pairs of variables.
```{r PairsPlot}
ggpairs(dark.df)
Let us pay more attention to each pair.
ggMarginal(
ggplot(dark.df, aes(x=ch1, y=ch2)) +
geom_point()
)
We improve the plot.
```{r PairWithMarginalImproved}
```{r PairWithMarginalImproved}
ggMarginal(
ggplot(dark.df, aes(x=ch1, y=ch2)) +
geom_point(size=.05) +
scale_x_log10() +
scale_y_log10(),
type = "densigram"
)
knitr::opts_chunk$set(echo = TRUE)
require(reshape2)
require(ggthemes)
require(ggExtra)
knitr::opts_chunk$set(echo = TRUE)
require(reshape2)
require(ggplot2)
require(ggthemes)
theme_set(theme_minimal())
# Exploratory Data Analysis
require(GGally)
require(ggExtra)
We will use the "imagematrix" library.
It is basic, but enough for our purposes.
We will also load three data sets that are available in the repository.
We will work with the Urban data set.
An Exploratory Data Analysis - EDA can be quantitative, graphical, or both.
We usually start reporting the very basic information about the data.
Let's move to graphical representations of the data.
Histograms of the data complement the information shown by the boxplots.
We will use the Freedman-Diaconis rule for building the histograms.
It consists of using bins of equal size: $\frac32 \text{IQR}(z) / n^{1/3}$.
How about "mixing" the second boxplot with the second histogram?
What can we conclude from this analysis?
* The data are positive
* The data have a very large dynamic range
* The data are strongly asymmetric
It's time to look ad the data in their "natural" domain: as an image.
The "imagematrix" library requires that the data be in $[0,1]$.
It provides a function to accomplish this mapping.
We hardly see anything.
There are a few very large values that "flatten" most of the observations into very dark shades of gray.
We would like to "use" equally all possible values.
In other words, we would like to have a uniform histogram.
We need some theory to solve this challenge.
Consider the continuous random variable $Z\colon \Omega\to\mathbb R$ with cumulative distribution function $F_Z$.
The random variable $W=F_Z(Z)$ has uniform distribution.
Proof: The cumulative distribution function of $W$ is $F_W(w)=\Pr(W\leq w)=\Pr(F_Z(Z)\leq w)$.
Since $Z$ is continuous, there exists the inverse of its cumulative distribution function, $F^{-1}_Z$.
We can then write
$F_W(w)=\Pr(F_Z(Z)\leq w) = \Pr(F^{-1}_Z(F_Z(Z)) \leq F_Z^{-1}(w)) = \Pr(Z\leq F^{-1}_Z(w))$,
which is exactly the cumulative distribution function of $Z$ at $F^{-1}_Z(w)$, so $F_W(w)=F_Z(F^{-1}_Z(w))=w$, which characterizes a uniform random variable on $(0,1)$.
So we only need to apply the cumulative distribution function of the random variable that produced the data to the data themselves and we will obtain samples from the Uniform distribution.
But do we have this function?
Usually we don't, but we can estimate it.
One of the simplest manners to estimate a cumulative distribution function from data $z=(z_1,\dots,z_n)$ is with the empirical cumulative distribution function, or just "empirical function."
It is just the finite approximation of the definition of a cumulative distribution function, and is given by
\begin{equation}
\widehat{F}(t) = \frac1n \#\{j \text{ such that } z_j\leq t\} ,
\end{equation}
where $\#$ denotes the number of elements in the set.
Let us see the original data and its empirical function.
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
require(reshape2)
require(ggplot2)
require(ggthemes)
theme_set(theme_minimal())
require(GGally)
require(ggExtra)
require(tinytex)
knitr::opts_chunk$set(echo = TRUE)
require(reshape2)
require(ggplot2)
require(ggthemes)
theme_set(theme_minimal())
require(GGally)
require(ggExtra)
require(tinytex)
## Implement the densities of the K and G0 distributions for intensity data
Import the bright image data from the "ImagematrXI" library for analysis.
```{r LoadUrbanHVData}
# Use your paths
source("../../Code/R/imagematrix.R")
load("../../Data/R/bright.Rdata")
# Inspect what they are in the Environment window
The reports are usually started with the very basic information about the data, including its type, dimension and range, etc.
```{r Quantitative_EDA_Urban}
typeof(bright)
dim(bright)
range(bright)
vector.bright <- data.frame(bright=as.vector(bright))
summary(vector.bright)
vector.bright <- data.frame(bright=as.vector(bright))
summary(vector.bright)
When moving to graphical representations of the data, We can analyze the data with boxplot and histogram
The outliers are shown in orange.
```{r Graphical_EDA_Urban_Boxplot, fig.cap='Boxplots with notches', fig.subcap=c('Linear scale', 'Semilogarithmic scale'), out.width = "50%", fig.align = "center"}
ggplot(vector.bright, aes(x=bright)) +
geom_boxplot(notch = TRUE)+
geom_boxplot(outlier.colour="orange", outlier.shape=7,outlier.size=1)+
ggtitle("bright")
First, we get a boxplot of the bright image data, i.e., the graph on the left named "bright". It can be observed that the 'bright' graph boxes are so flattened. Therefore, we perform a logarithmic transformation of the data to get the boxplot titled "Bright at half logarithmic scale" in the figure below.
As we can observe in the "bright at half-logarithmic scale" graph, the mean value of the data is around 10^5 and does not fluctuate much.
Histograms of the data complement the information are shown by the boxplots. We also use the Freedman-Diaconis rule for building the histograms, which consists of using bins of equal size: $\frac32 \text{IQR}(z) / n^{1/3}$.
ggplot(vector.bright, aes(x=bright)) +
geom_histogram(aes(y=..density..),
bins=nclass.FD(unlist(vector.bright)),
col="red", fill="white")+
ggtitle("bright")
* The data are positive
* The data have a very large dynamic range
* The data are some symmetric
Then, we can pay attention to the "natural" domain of the data: as an image.
The "imagematrix" library requires the data with the range between $[0,1]$ and we perform a function to do this mapping.
However, there are little things that we can observe in the above image. The reason may be there are a few very large values that "flatten" most of the observations into very deep greyscales. Instead, We want to "use" all possible values equally. In other words, we want to have a uniform histogram.
Considering the cumulative distribution function $F_Z$ of the continuous random variable $Zcolon \Omega\to\mathbb R$, the random variable $W=F_Z(Z)$ has a uniform distribution.
It can be proved that the cumulative distribution function of $W$ is $F_W(w)=/Pr(W/leq w)=/Pr(F_Z(Z)/leq w)$.
Since $Z$ is continuous, there exists the reciprocal of its cumulative distribution function $F^{-1}_Z$.
Then we can re-write it as
$F_W(w) = Pr(F_Z(Z)/leq w) = Pr(F^{-1}_Z(F_Z(Z)) \leq F_Z^{-1}(w)) = Pr(Z\leq F^{-1}_Z(w))$.
This is exactly the cumulative distribution function of $Z$ at $F^{-1}_Z(w)$, thus we can prove that $F_W(w) = F_Z(F^{-1}_Z(w))=w$, which characterizes the uniform random variables on $(0,1)$.
Therefore, we need to apply the cumulative distribution function of the random variable generating the data to the data itself, and we'll get a uniformly distributed sample.
Unfortunately, we don't have such function, but we can estimate it.
bright.v = as.vector(bright)
bright.df = data.frame(as.vector(bright))
u = mean(bright.v)
f <- function(x){1/u*exp(1)^(-x/u)}
x <- seq(0, 5000000, length.out=5000)
y = f(x)
y.df = data.frame(as.vector(y))
xy.df<-data.frame(x=x,y)
ggplot(xy.df,aes(x=x,y))+
geom_line(colour="orange", size=1)+
ggtitle("Bright gamma distribution")+
ggplot(bright.df, aes(x=bright)) +
geom_histogram(aes(y=..density..),
bins=nclass.FD(unlist(bright.df))/50,
col="black", fill="white") +
stat_ecdf(col="orange") +
ylab("Density and Empirical function") +
xlab("Intensity in semilogarithmic scale") +
histogram:
```{r}
x <- data.frame(x = as.vector(log(bright)))
ggplot(xy.df,aes(x=x,y))+
geom_line(colour="orange", size=1)+
ggtitle("Bright gamma distribution")+
ggplot(bright.df, aes(x=bright)) +
geom_histogram(aes(y=..density..),
bins=nclass.FD(unlist(bright.df))/50,
col="black", fill="white") +
stat_ecdf(col="orange") +
ylab("Density and Empirical function") +
xlab("Intensity in semilogarithmic scale") +
ggplot(xy.df,aes(x=x,y))+
geom_line(colour="orange", size=1)+
ggtitle("Bright gamma distribution")+
ggplot(bright.df, aes(x=bright)) +
geom_density(col="red", size=1)
bright.v = as.vector(bright)
bright.df = data.frame(as.vector(bright))
u = mean(bright.v)
f <- function(x){1/u*exp(1)^(-x/u)}
x <- seq(0, 5000000, length.out=5000)
y = f(x)
y.df = data.frame(as.vector(y))
xy.df<-data.frame(x=x,y)
ggplot(xy.df,aes(x=x,y))+
geom_line(colour="orange", size=1)+
ggtitle("Bright gamma distribution")+
ggplot(bright.df, aes(x=bright)) +
geom_density(col="red", size=1)
ggplot(bright.df, aes(x=bright)) +
geom_histogram(aes(y=..density..),
bins=nclass.FD(unlist(bright.df))/50,
col="black", fill="white") +
stat_ecdf(col="orange") +
ylab("Density and Empirical function") +
xlab("Intensity in semilogarithmic scale") +
ggplot(xy.df,aes(x=x,y))+
geom_line(colour="orange", size=1)+
ggtitle("Bright gamma distribution")
ggplot(bright.df, aes(x=bright)) +
geom_density(col="red", size=1)
```{r Moments estimators}
bright.v = as.vector(bright)
bright.df = data.frame(as.vector(bright))
u = mean(bright.v)
f <- function(x){1/u*exp(1)^(-x/u)}
x <- seq(0, 5000000, length.out=5000)
y = f(x)
y.df = data.frame(as.vector(y))
xy.df<-data.frame(x=x,y)
ggplot(xy.df,aes(x=x,y))+
geom_line(colour="orange", size=1)+
ggtitle("Bright gamma distribution")
ggplot(bright.df, aes(x=bright)) +
geom_histogram(aes(y=..density..),
bins=nclass.FD(unlist(vector.bright))/50,
col="black", fill="white") +
stat_ecdf(col="orange") +
ylab("Density and Empirical function") +
xlab("Intensity in semilogarithmic scale") +
scale_x_log10()
bright.v = as.vector(bright)
bright.df = data.frame(as.vector(bright))
u = mean(bright.v)
f <- function(x){1/u*exp(1)^(-x/u)}
x <- seq(0, 5000000, length.out=5000)
y = f(x)
y.df = data.frame(as.vector(y))
xy.df<-data.frame(x=x,y)
ggplot(xy.df,aes(x=x,y))+
geom_line(colour="orange", size=1)+
ggtitle("Bright gamma distribution")
ggplot(bright.df, aes(x=bright)) +
geom_histogram(aes(y=..density..),
bins=nclass.FD(unlist(bright.df))/50,
col="black", fill="white") +
stat_ecdf(col="orange") +
ylab("Density and Empirical function") +
xlab("Intensity in semilogarithmic scale") +
scale_x_log10()
x <- data.frame(x = as.vector(bright))
ggplot(x, aes(x=x)) +
geom_histogram(aes(y=..density..),
col="blue", fill="white") +
ylab("Proportions histogram")
```{r}
x <- data.frame(x = as.vector(bright))
ggplot(x, aes(x=x)) +
geom_histogram(aes(y=..density..),
col="blue", fill="white") +
ylab("Proportions histogram")
x <- data.frame(x = as.vector(log(bright)))
ggplot(x, aes(x=x)) +
geom_histogram(aes(y=..density..),
col="blue", fill="white") +
ylab("Proportions histogram")
ggplot(x, aes(x=x)) +
geom_histogram(aes(y=..density..),
col="blue", fill="white") +
ylab("Proportions histogram")
knitr::opts_chunk$set(echo = TRUE)
require(reshape2)
require(ggplot2)
require(ggthemes)
theme_set(theme_minimal())
require(GGally)
require(ggExtra)
bright.v = as.vector(bright)
bright.df = data.frame(as.vector(bright))
u = mean(bright.v)
f <- function(x){1/u*exp(1)^(-x/u)}
x <- seq(0, 5000000, length.out=5000)
y = f(x)
y.df = data.frame(as.vector(y))
xy.df<-data.frame(x=x,y)
ggplot(xy.df,aes(x=x,y))+
geom_line(colour="orange", size=1)+
ggtitle("Bright gamma distribution")
ggplot(bright.df, aes(x=bright)) +
geom_density(col="red", size=1)+
scale_x_log10()
bright.v = as.vector(bright)
bright.df = data.frame(as.vector(bright))
u = mean(bright.v)
f <- function(x){1/u*exp(1)^(-x/u)}
x <- seq(0, 5000000, length.out=5000)
y = f(x)
y.df = data.frame(as.vector(y))
xy.df<-data.frame(x=x,y)
ggplot(xy.df,aes(x=x,y))+
geom_line(colour="orange", size=1)+
ggtitle("Bright gamma distribution")
ggplot(bright.df, aes(x=bright)) +
geom_density(col="red", size=1)+
scale_x_log10()
bright.v = as.vector(bright)
bright.df = data.frame(as.vector(bright))
u = mean(bright.v)
f <- function(x){1/u*exp(1)^(-x/u)}
x <- seq(0, 5000000, length.out=5000)
y = f(x)
y.df = data.frame(as.vector(y))
xy.df<-data.frame(x=x,y)
ggplot(xy.df,aes(x=x,y))+
geom_line(colour="orange", size=1)+
scale_x_log10()+
ggtitle("Bright gamma distribution")
bright.v = as.vector(bright)
bright.df = data.frame(as.vector(bright))
u = mean(bright.v)
f <- function(x){1/u*exp(1)^(-x/u)}
x <- seq(0, 5000000, length.out=5000)
y = f(x)
y.df = data.frame(as.vector(y))
xy.df<-data.frame(x=x,y)
ggplot(xy.df,aes(x=x,y))+
geom_line(colour="orange", size=1)+
ggtitle("Bright gamma distribution")
ggplot(bright.df, aes(x=bright)) +
geom_density(col="red", size=1)+
scale_x_log10()
ggplot(bright.df, aes(x=bright)) +
geom_density(col="red", size=1)+
scale_x_log10()
histogram:
```{r}
x <- data.frame(x = as.vector(log(bright)))
ggplot(x, aes(x=x)) +
geom_histogram(aes(y=..density..),
col="blue", fill="white") +
ylab("Proportions histogram")
ggplot(x, aes(x=x)) +
geom_histogram(aes(y=..density..),
col="blue", fill="white") +
ylab("Proportions histogram")
```{r}
x <- data.frame(x = as.vector(log(bright)))
ggplot(x, aes(x=x)) +
geom_histogram(aes(y=..density..),
col="blue", fill="white") +
ylab("Proportions histogram")
ggplot(bright.df, aes(x=bright)) +
geom_density(col="red", size=1)+
scale_x_log10()
knitr::opts_chunk$set(echo = TRUE)
require(reshape2)
require(ggplot2)
require(ggthemes)
theme_set(theme_minimal())
require(GGally)
require(ggExtra)
require(tinytex)
ggplot(vector.bright, aes(x=bright)) +
geom_histogram(aes(y=..density..),
bins=nclass.FD(unlist(vector.bright))/50,
col="black", fill="white") +
stat_ecdf(col="orange") +
ylab("Density and Empirical function") +
xlab("Intensity in semilogarithmic scale") +
scale_x_log10()
bright.v = as.vector(bright)
bright.df = data.frame(as.vector(bright))
u = mean(bright.v)
f <- function(x){1/u*exp(1)^(-x/u)}
x <- seq(0, 5000000, length.out=5000)
y = f(x)
y.df = data.frame(as.vector(y))
xy.df<-data.frame(x=x,y)
ggplot(xy.df,aes(x=x,y))+
geom_line(colour="orange", size=1)+
ggtitle("Bright gamma distribution")
ggplot(bright.df, aes(x=bright)) +
geom_density(col="red", size=1)+
geom_histogram(aes(y=..density..),
col="blue", fill="white")
ggplot(bright.df, aes(x=bright)) +
geom_density(col="red", size=1)+
geom_histogram(aes(y=..density..),
col="blue", fill="white")
scale_x_log10()
ggplot(bright.df, aes(x=bright)) +
geom_density(col="red", size=1)+
geom_histogram(aes(y=..density..),
col="blue", fill="white")+
scale_x_log10()
ggplot(bright.df, aes(x=bright)) +
geom_histogram(aes(y=..density..),
col="blue", fill="white")+
geom_density(col="red", size=1)+
scale_x_log10()
